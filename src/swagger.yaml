openapi: 3.0.0
info:
  title: Sela Connect API Docs
  version: 1.0.0
  description: API documentation for Sela Connect Apis

tags:
  - name: Ping
    description: Endpoints for health check and logs management
  - name: Auth
    description: Endpoints for Authentications
  - name: Profile
    description: Endpoints for User Profile Management
  - name: DeliveryOrder
    description: Endpoints for User Managing Delivery Orders From Clients

components:
  schemas:
    Auth:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
        recoveryEmail:
          type: string
          format: email
          description: User's recovery email address
        hash:
          type: string
          description: Password hash
        disabled:
          type: boolean
          description: Is the account disabled
        deleted:
          type: boolean
          description: Is the account deleted
        created:
          type: string
          format: date-time
          description: Account creation date
        otp:
          type: string
          description: One-time password
        verified:
          type: boolean
          description: Is the account verified
        verifyTokenString:
          type: string
          description: Token string for account verification
        resetTokenString:
          type: string
          description: Token string for password reset
    Profile:
      type: object
      properties:
        id:
          type: string
          example: "507f191e810c19729de860ea"
        username:
          type: string
          example: "user90249"
        profileImage:
          type: string
          example: "https://example.com/image.jpg"
        email:
          type: string
          example: "user@example.com"
        createdAt:
          type: string
          format: date-time
          example: "2023-07-18T12:34:56Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-07-18T12:34:56Z"
    DeliveryOrder:
      type: object
      properties:
        packageDescription:
          type: string
          example: "Package containing electronics"
        packageWeight:
          type: number
          example: 1.5
        perishables:
          type: boolean
          example: true
        fragile:
          type: boolean
          example: false
        pickupIsResidential:
          type: boolean
          example: true
        dropoffIsResidential:
          type: boolean
          example: false
        pickupRestrictions:
          type: string
          example: "No heavy lifting"
        dropoffRestrictions:
          type: string
          example: "Limited access"
        senderName:
          type: string
          example: "John Doe"
        senderPhoneNo:
          type: string
          example: "+1234567890"
        receiverName:
          type: string
          example: "Jane Smith"
        receiverPhoneNo:
          type: string
          example: "+0987654321"
        pickupAddress:
          type: string
          example: "123 Main St, Apt 4B"
        dropoffAddress:
          type: string
          example: "456 Elm St, Suite 12"
        pickupLga:
          type: string
          example: "Central"
        dropoffLga:
          type: string
          example: "North"
        paymentMethod:
          type: string
          enum:
            - online
            - ondelivery
            - onpickup
          example: "online"
        totalDistance:
          type: number
          example: 15.2
        user:
          type: string
          example: "608c2f7794d3e00f1a2d0a1e"
        deliveryId:
          type: string
          example: "DEL123456"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - packageDescription
        - perishables
        - fragile
        - pickupIsResidential
        - dropoffIsResidential
        - senderName
        - senderPhoneNo
        - receiverName
        - receiverPhoneNo
        - pickupAddress
        - dropoffAddress
        - pickupLga
        - dropoffLga
        - paymentMethod
        - totalDistance
        - deliveryId
paths:

  /profile:
    post:
      tags:
        - Profile
      summary: Create a new profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
      responses:
        201:
          description: Profile created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        400:
          description: Bad request
        500:
          description: Error creating profile

    get:
      tags:
        - Profile
      summary: Get profiles with pagination
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
          description: Page number for pagination
      responses:
        200:
          description: Profiles fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  profiles:
                    type: array
                    items:
                      $ref: "#/components/schemas/Profile"
                  currentPage:
                    type: integer
                  totalPages:
                    type: integer
        500:
          description: Error fetching profiles

  /profile/search:
    get:
      tags:
        - Profile
      summary: Search profiles based on queries
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: username
          required: false
          schema:
            type: string
          description: Username to search for
        - in: query
          name: email
          required: false
          schema:
            type: string
          description: Email to search for
        # Add other query parameters as needed
      responses:
        200:
          description: Profiles fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Profile"
        500:
          description: Error searching profiles

  /profile/{userId}:
    get:
      tags:
        - Profile
      summary: Get profile by user ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: User ID of the profile to fetch
      responses:
        200:
          description: Profile fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        404:
          description: Profile not found
        500:
          description: Error fetching profile

    put:
      tags:
        - Profile
      summary: Update profile
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: User ID of the profile to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                profileImage:
                  type: string
                # Add other fields as needed
      responses:
        200:
          description: Profile updated successfully
        400:
          description: Bad request
        404:
          description: Profile not found
        500:
          description: Error updating profile

    delete:
      tags:
        - Profile
      summary: Delete profile
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: User ID of the profile to delete
      responses:
        200:
          description: Profile deleted successfully
        404:
          description: Profile not found
        500:
          description: Error deleting profile

  /profile/{userId}/upload:
    post:
      tags:
        - Profile
      summary: Upload profile image
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: User ID of the profile to update
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        200:
          description: Profile image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  urls:
                    type: array
                    items:
                      type: string
        400:
          description: Bad request
        500:
          description: Error uploading profile image

  /auth/signup/emailandpassword:
    post:
      tags:
        - Auth
      summary: User Signup
      description: Signup a new user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                role:
                  type: string
              required:
                - email
                - password
                - role
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "400":
          description: Invalid input
        "409":
          description: Email already registered

  /auth/login:
    post:
      tags:
        - Auth
      summary: User Login
      description: Login a user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                role:
                  type: string
              required:
                - email
                - password
                - role
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "400":
          description: Invalid input
        "401":
          description: Unauthorized

  /auth/forgot-password:
    post:
      tags:
        - Auth
      summary: Forgot Password
      description: Request a password reset link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        "200":
          description: Reset link sent
        "400":
          description: Invalid input
        "404":
          description: Email not found

  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: Reset Password
      description: Reset the password using a reset token
      parameters:
        - name: resetToken
          in: query
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
              required:
                - newPassword
      responses:
        "200":
          description: Password reset successful
        "400":
          description: Invalid input
        "401":
          description: Invalid or expired reset token

  /auth/update:
    put:
      tags:
        - Auth
      summary: Update User Details
      description: Update email, password, and recovery email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                recoveryEmail:
                  type: string
                  format: email
      responses:
        "200":
          description: User details updated
        "400":
          description: Invalid input
        "401":
          description: Unauthorized

  /auth/disable:
    put:
      tags:
        - Auth
      summary: Disable Account
      description: Disable a user account
      responses:
        "200":
          description: Account disabled
        "401":
          description: Unauthorized

  /auth/delete:
    delete:
      tags:
        - Auth
      summary: Delete Account
      description: Delete a user account
      responses:
        "200":
          description: Account deleted
        "401":
          description: Unauthorized

  /auth/is-valid:
    get:
      tags:
        - Auth
      summary: Check if token is valid
      description: Checks if the provided token is valid
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token
      responses:
        200:
          description: Token verification status
          content:
            application/json:
              schema:
                type: object
                properties:
                  isVerified:
                    type: boolean
        401:
          description: Token is missing
        403:
          description: Token is not valid
        404:
          description: User not found
        500:
          description: Internal Server Error

  /resend-verification-email:
    post:
      tags:
        - Auth
      summary: Resend verification email
      description: Resends a verification email to a user if the user is found and has not been verified yet.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                  description: The email address of the user to whom the verification email will be sent.
      responses:
        "200":
          description: Verification email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Verification email sent
                    description: Success message indicating the verification email was sent.
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email format
                    description: Error message for invalid email or already verified email.
        "404":
          description: User Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
                    description: Error message when the user is not found in the database.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server error
                    description: Error message indicating a server error occurred.

  /:
    get:
      summary: Performs a ping request
      tags: [Ping]
      responses:
        200:
          description: Returns pong

  /status:
    get:
      summary: Get server status
      tags: [Ping]
      responses:
        200:
          description: Returns server status

  /request-logs:
    get:
      summary: Get request logs
      tags: [Ping]
      responses:
        200:
          description: Returns request logs
        500:
          description: Error reading request logs

  /app-logs:
    get:
      summary: Get application logs
      tags: [Ping]
      responses:
        200:
          description: Returns application logs
        500:
          description: Error reading application logs

  /clear-request-logs:
    get:
      summary: Clear request logs
      tags: [Ping]
      responses:
        200:
          description: Request logs cleared
        500:
          description: Error clearing request logs

  /clear-app-logs:
    get:
      summary: Clear application logs
      tags: [Ping]
      responses:
        200:
          description: Application logs cleared
        500:
          description: Error clearing application logs
  /messages:
    post:
      summary: Post a new customer message
      tags: [CustomerSupport]
      description: Receive a new message from a customer and save it to the database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: customer@example.com
                message:
                  type: string
                  example: I have an issue with my order.
              required:
                - email
                - message
      responses:
        '201':
          description: Message received successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Message received successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email format
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server error

    get:
      summary: Retrieve customer messages
      tags: [CustomerSupport]
      description: Retrieve a list of customer messages with optional filtering.
      parameters:
        - name: replied
          in: query
          description: Filter messages by whether they have been replied to.
          schema:
            type: boolean
        - name: startDate
          in: query
          description: Filter messages created on or after this date (ISO 8601 format).
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: Filter messages created on or before this date (ISO 8601 format).
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of customer messages
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    email:
                      type: string
                    message:
                      type: string
                    created:
                      type: string
                      format: date-time
                    replied:
                      type: boolean
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid startDate format
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server error

  /messages/{messageId}/reply:
    post:
      summary: Reply to a customer message
      tags: [CustomerSupport]
      description: Admin replies to a customer message and updates the message status to replied.
      parameters:
        - name: messageId
          in: path
          required: true
          description: ID of the message to reply to
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                replyMessage:
                  type: string
                  example: Thank you for reaching out. Your issue has been addressed.
              required:
                - replyMessage
      responses:
        '200':
          description: Reply sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Reply sent successfully
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Message not found
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server error

  /delivery-orders:
    get:
      tags:
        - DeliveryOrder
      summary: Get all delivery orders
      description: Retrieve delivery orders in batches of 30, paginated.
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: true
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of orders per page
          required: false
          schema:
            type: integer
            example: 30
      responses:
        '200':
          description: Successful retrieval of delivery orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeliveryOrder'
        '500':
          description: Server error

    post:
      tags:
        - DeliveryOrder
      summary: Create a new delivery order
      description: Submit a new delivery order to the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeliveryOrder'
      responses:
        '201':
          description: Delivery order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryOrder'
        '400':
          description: Invalid input
        '500':
          description: Server error

  /delivery-orders/{id}:
    get:
      tags:
        - DeliveryOrder
      summary: Get delivery order by ID
      description: Retrieve a specific delivery order by its ID.
      parameters:
        - name: id
          in: path
          description: ID of the delivery order
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful retrieval of delivery order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryOrder'
        '404':
          description: Delivery order not found
        '500':
          description: Server error

    put:
      tags:
        - DeliveryOrder
      summary: Update delivery order by ID
      description: Update the details of a specific delivery order by its ID.
      parameters:
        - name: id
          in: path
          description: ID of the delivery order
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeliveryOrder'
      responses:
        '200':
          description: Delivery order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryOrder'
        '400':
          description: Invalid input
        '404':
          description: Delivery order not found
        '500':
          description: Server error
